        // Send data
    #ifdef NIC_CCIP_POLLING
        RpcPckt* tx_ptr_casted = reinterpret_cast<RpcPckt*>(tx_ptr);

        tx_ptr_casted->hdr.c_id        = <CONN_ID>;
        tx_ptr_casted->hdr.rpc_id      = <RPC_ID>;
        tx_ptr_casted->hdr.n_of_frames = <FUN_NUM_OF_FRAMES>;
        tx_ptr_casted->hdr.frame_id    = 0;

        tx_ptr_casted->hdr.fn_id  = <FUN_FUNCTION_ID>;
        tx_ptr_casted->hdr.argl   = <FUN_ARG_LENGTH_BYTES>;

        tx_ptr_casted->hdr.ctl.req_type    = <REQ_TYPE>;
        tx_ptr_casted->hdr.ctl.update_flag = change_bit;

/*DATA_LAYOUT*/
        // Set valid
        _mm_mfence();
        tx_ptr_casted->hdr.ctl.valid = 1;
    #elif NIC_CCIP_MMIO
        RpcPckt request __attribute__ ((aligned (64)));

        request.hdr.c_id        = <CONN_ID>;
        request.hdr.rpc_id      = <RPC_ID>;
        request.hdr.n_of_frames = <FUN_NUM_OF_FRAMES>;
        request.hdr.frame_id    = 0;

        request.hdr.fn_id = <FUN_FUNCTION_ID>;
        request.hdr.argl  = <FUN_ARG_LENGTH_BYTES>;

        request.hdr.ctl.req_type = <REQ_TYPE>;
        request.hdr.ctl.valid    = 1;

        _mm_mfence();

/*DATA_LAYOUT_MMIO*/

        // MMIO only supports AVX writes
        #ifdef PLATFORM_PAC_A10
            // PAC_A10 supports AVX-512 - easy!
            _mm512_store_si512(reinterpret_cast<__m512i*>(tx_ptr),
                               *(reinterpret_cast<__m512i*>(&request)));
        #else
            // BDX only supports AVX-256, so split into two writes
            //  - performance will not be good
            //  - and I'm not even sure, this will ever work (so far, I have not seen any testing issues)
            //  - better to avoid the MMIO interface for BDX
            _mm256_store_si256(reinterpret_cast<__m256i*>(tx_ptr),
                               *(reinterpret_cast<__m256i*>(&request)));
            _mm256_store_si256(reinterpret_cast<__m256i*>(tx_ptr + 32),
                               *(reinterpret_cast<__m256i*>(reinterpret_cast<uint8_t*>(&request) + 32)));
        #endif
    #elif NIC_CCIP_DMA
        RpcPckt* tx_ptr_casted = reinterpret_cast<RpcPckt*>(tx_ptr);

        tx_ptr_casted->hdr.c_id        = <CONN_ID>;
        tx_ptr_casted->hdr.rpc_id      = <RPC_ID>;
        tx_ptr_casted->hdr.n_of_frames = <FUN_NUM_OF_FRAMES>;
        tx_ptr_casted->hdr.frame_id    = 0;

        tx_ptr_casted->hdr.fn_id = <FUN_FUNCTION_ID>;
        tx_ptr_casted->hdr.argl  = <FUN_ARG_LENGTH_BYTES>;

        tx_ptr_casted->hdr.ctl.req_type    = <REQ_TYPE>;
        tx_ptr_casted->hdr.ctl.update_flag = change_bit;

/*DATA_LAYOUT*/
        tx_ptr_casted->hdr.ctl.valid = 1;
        _mm_mfence();

        if (batch_counter == cfg::nic::tx_batch_size - 1) {
            nic_->notify_nic_of_new_dma(nic_flow_id_, current_batch_ptr);

            current_batch_ptr += cfg::nic::tx_batch_size;
            if (current_batch_ptr == ((1 << cfg::nic::l_tx_queue_size) / cfg::nic::tx_batch_size)*cfg::nic::tx_batch_size) {
                current_batch_ptr = 0;
            }

            batch_counter = 0;
        } else {
            ++batch_counter;
        }
    #else
        #error NIC CCI-P mode is not defined
    #endif
