// Copyright 2016 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////


`timescale 1ps/1ps

// DESCRIPTION
// Frequency monitor for 8 input signals.
// Generated by one of Gregg's toys.   Share And Enjoy.

module alt_fmon8 #(
    parameter SIM_HURRY = 1'b0,
    parameter SIM_EMULATE = 1'b0
) (
	input clk, 
	input [7:0] din,
	input [2:0] din_sel,
	output [15:0] dout,
	output dout_fresh
);

////////////////////////////
// divide down and cross domain

wire [7:0] prescale;
wire [7:0] prescale_s;

genvar i;
generate
    for (i=0; i<8; i=i+1) begin : lp0
        wire [5:0] local_cnt;
        alt_cnt6 ct0 (
            .clk(din[i]),
            .dout(local_cnt)
        );
        defparam ct0 .SIM_EMULATE = SIM_EMULATE;

        assign prescale[i] = local_cnt[5];
        alt_sync1r1 sn0 (
            .din_clk(din[i]),
            .din(prescale[i]),
            .dout_clk(clk),
            .dout(prescale_s[i])
        );
        defparam sn0 .SIM_EMULATE = SIM_EMULATE;

    end
endgenerate

////////////////////////////
// select signal to watch

wire sel_prescale;
alt_mux8w1t2s1 mx0 (
    .clk(clk),
    .din(prescale_s),
    .sel(din_sel),
    .dout(sel_prescale)
);
defparam mx0 .SIM_EMULATE = SIM_EMULATE;

reg last_sel_prescale = 1'b0;
always @(posedge clk) last_sel_prescale <= sel_prescale;

reg ping = 1'b0;
always @(posedge clk) ping <= sel_prescale ^ last_sel_prescale;

////////////////////////////
// count selected signal

wire sclr;
alt_ripple16 rp0 (
    .clk(clk),
    .sclr(sclr),
    .inc(ping),
    .dout(dout)
);
defparam rp0 .SIM_EMULATE = SIM_EMULATE;

////////////////////////////
// regular measuring interval

generate
    if (SIM_HURRY) begin
        // times 100 KHz
        alt_metronome32000 mt0 (
            .clk(clk),
            .sclr(1'b0),
            .dout(sclr)
        );
        defparam mt0 .SIM_EMULATE = SIM_EMULATE;

    end
    else begin
        // times 10 KHz
        alt_metronome320000 mt0 (
            .clk(clk),
            .sclr(1'b0),
            .dout(sclr)
        );
        defparam mt0 .SIM_EMULATE = SIM_EMULATE;

    end
endgenerate

assign dout_fresh = sclr;
endmodule

