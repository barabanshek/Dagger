// Copyright 2016 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////


`timescale 1ps/1ps

// DESCRIPTION
// MLAB with 20 bit words.  1 addr lines.
// Generated by one of Gregg's toys.   Share And Enjoy.

module alt_mlab20a1r1w1 #(
    parameter SIM_EMULATE = 1'b0
) (
    input wclk,
    input [0:0] waddr,
    input [19:0] din,
    input rclk,
    input [0:0] raddr,
    output [19:0] dout
);

////////////////////////////
// handle data bits 19..0

reg [0:0] waddr_m0 = 1'b0 /* synthesis preserve */;
always @(posedge wclk) waddr_m0 <= waddr;

reg [19:0] wdata_m0 = 20'b0 /* synthesis preserve */;
always @(posedge wclk) wdata_m0 <= din[19:0];

reg [0:0] raddr_m0 = 1'b0 /* synthesis preserve */;
always @(posedge rclk) raddr_m0 <= raddr;

alt_mlab m0 (
	.wclk(wclk),
	.wena(1'b1),
	.waddr_reg(waddr_m0),
	.wdata_reg(wdata_m0),
	.raddr(raddr_m0),
	.rdata(dout[19:0])
);
defparam m0 .WIDTH = 20;
defparam m0 .ADDR_WIDTH = 1;
defparam m0 .SIM_EMULATE = SIM_EMULATE;

endmodule

